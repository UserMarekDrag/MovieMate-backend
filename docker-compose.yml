# docker-compose.yml

# Version of Docker Compose configuration file
version: "3"

# Define services that are part of the application
services:

  # Service for the PostgreSQL database
  db:
    # Use official PostgreSQL Docker image from Docker Hub
    image: postgres

    # Set environment variables for the PostgreSQL container
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}

    # Expose PostgreSQL port and map it to the same port on the host
    ports:
      - "5432:5432"

    # Create a named volume for PostgreSQL data storage
    volumes:
      - pg_data:/var/lib/postgresql/data/

  # Service for the PGAdmin PostgreSQL management tool
  pgadmin:
    # Use the official PGAdmin Docker image from Docker Hub
    image: dpage/pgadmin4

    # Set environment variables for the PGAdmin container
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}

    # Expose PGAdmin web interface on port 8080 and map it to port 80 on the container
    ports:
      - "8080:80"

    # Make the PGAdmin service dependent on the 'db' service
    depends_on:
      - db

  # Service for the RabbitMQ message broker
  rabbit:

    # Use official RabbitMQ Docker image from Docker Hub
    image: rabbitmq:3-management

    # Expose RabbitMQ port and map it to the same port on the host
    ports:
      - "5672:5672"  # AMQP protocol
      - "15672:15672"  # Management UI

  # Service for the Django web application
  backend:

    # Build the Docker image for the web service using the Dockerfile in the current directory
    build:
      context: .

    # Command to start the Django development server
    command: python manage.py runserver 0.0.0.0:8000

    # Load environment variables from the .env file in the current directory
    env_file:
      - .env

    # Mount the project directory on the host into the container for development purposes
    volumes:
      - .:/code

    # Expose the web server port and map it to the same port on the host
    ports:
      - "8000:8000"

    # Depend on the db service so that it starts first
    depends_on:
      - db
      - rabbit

  # Service for the Celery task queue
  celery:
    # Set user ID and group ID for the Celery process (non-root user for enhanced security)
    user: "1000:1000"

    # Build the Docker image for the Celery service using the Dockerfile in the current directory
    build:
      context: .
      dockerfile: Dockerfile.selenium

    # Command to start the Celery worker with our Django application and log level set to info
    command: celery -A moviemate worker --loglevel=info

    # Load environment variables from the .env file in the current directory
    env_file:
      - .env

    # Mount the project directory on the host into the container for development purposes
    volumes:
      - .:/code

    # Depend on the db and rabbit services so that they start first
    depends_on:
      - db
      - rabbit

  # Service for the Celery Beat scheduler
  celery-beat:
    # Build the Docker image for the Celery Beat service using the Dockerfile in the current directory
    build: .

    # Command to start the Celery Beat scheduler with our Django application and log level set to info
    command: celery -A moviemate beat --loglevel=info

    # Mount the project directory on the host into the Celery Beat container for development purposes
    volumes:
      - .:/code

    # Depend on the db and rabbit services so that they start first
    depends_on:
      - db
      - rabbit

  # Service for the Nginx web server
  nginx:
    # Use the latest official Nginx Docker image from Docker Hub
    image: nginx:latest

    # Mount the local directory 'nginx' to '/etc/nginx/conf.d' in the container,
    # which is the directory Nginx looks at for its server configuration files
    volumes:
      - ./nginx:/etc/nginx/conf.d

    # Expose the web server port 80 and map it to port 8082 on the host
    ports:
      - "8082:80"

    # Depend on the backend service so that it starts first
    depends_on:
      - backend

# Define named volumes for data storage
volumes:
  pg_data: # PostgreSQL data volume